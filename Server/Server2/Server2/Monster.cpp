#include "pch.h"
#include "Monster.h"
#include"Session.h"
array<Monster, MAX_NPC> Monsters; //전체 NPC 

void Monster::Move()
{
	// Look 방향을우주선 방향으로 설정 
	// 움직이다가 플레이어가 사정거리안에 들어왔다? 
	// 플레이어 방향으로 이동 
	// 사정거리를 벗어나면 다시 우주선 방향으로 이동 
	//float checkPlayerPos = Vector3::Distance(pos);
	XMFLOAT3 up(0.0f, 1.0f, 0.0f);
	_prevpos = _pos; //이동하기 이전 좌표를 저장 
	for (auto& cl : ingamePlayer)
	{
		if (cl->_stage != _stagenum)continue;
		XMVECTOR posVec = XMLoadFloat3(&_pos);
		XMVECTOR spaceshipVec = XMLoadFloat3(&spaceshippos);
		XMVECTOR dirToSpaceship = XMVector3Normalize(spaceshipVec - posVec);

		XMFLOAT3 directionToSpaceshipFloat3;
		XMStoreFloat3(&directionToSpaceshipFloat3, dirToSpaceship);

		_look = directionToSpaceshipFloat3;

		XMVECTOR upVect = XMLoadFloat3(&up);
		XMVECTOR rightVec = XMVector3Cross(upVect, dirToSpaceship);
		XMFLOAT3 rightFloat3;
		XMStoreFloat3(&rightFloat3, rightVec);

		_right = rightFloat3;

		float checkPlayerDistance = Vector3::Distance(_pos, cl->_pos); // 사용자와의 나의 거리 

		if (_viewRange >= checkPlayerDistance) // 거리안에 들어왔다. 
		{
			
			//if (cl->_stage != 2)
			//{
			//	// 같은 스테이지가 아닐때 따라가지 못하게 막아놔야함 
			//	_pos = Vector3::Add(_pos, directionToSpaceshipFloat3, _speed);

			//}//cout << cl->_id << " 번 클라이언트 접근 " << endl;
			XMVECTOR posVec = XMLoadFloat3(&_pos);
			XMVECTOR playerVec = XMLoadFloat3(&cl->_pos);
			XMVECTOR directionToPlayer = XMVector3Normalize(playerVec - posVec);

			XMFLOAT3 directionToPlayerFloat3;
			XMStoreFloat3(&directionToPlayerFloat3, directionToPlayer);

			_look = directionToPlayerFloat3;

			// right 벡터 계산 (look과 up 벡터의 외적)
			XMVECTOR upVec = XMLoadFloat3(&up);
			XMVECTOR rightVec = XMVector3Cross(upVec, directionToPlayer);
			XMFLOAT3 rightFloat3;
			XMStoreFloat3(&rightFloat3, rightVec);

			// right 벡터를 업데이트
			_right = rightFloat3;
			//if (CollideCheckToPlayer()) _pos = _prevpos;
			//else 
			
			_pos = Vector3::Add(_pos, directionToPlayerFloat3, _speed); // 이동 , 

			m_SPBB.Center = _pos;
			m_SPBB.Center.y = _pos.y;
			
		}
		else
		{
			_pos = Vector3::Add(_pos, directionToSpaceshipFloat3, _speed);
			m_SPBB.Center = _pos;
			m_SPBB.Center.y = _pos.y;
	;
		}
	}
}

void Monster::Remove()
{
	_pos = { 0.f,-100.f,0.f };
}

void Monster::RemovePlayer(int client_id)
{
	Session* removeplayer;
	auto it = find_if(ingamePlayer.begin(), ingamePlayer.end(), [client_id](Session* s) {return s->_id == client_id; });
	//오토에는 클라이언트 아이디가 들어가있음
	if (ingamePlayer.end() != it)
	{
		ingamePlayer.erase(it);
	}
}



void Monster::IceMove()
{
	XMFLOAT3 up(0.0f, 1.0f, 0.0f);

	for (auto& cl : ingamePlayer)
	{
		XMVECTOR posVec = XMLoadFloat3(&_pos);
		XMVECTOR spaceshipVec = XMLoadFloat3(&spaceshippos);
		XMVECTOR dirToSpaceship = XMVector3Normalize(spaceshipVec - posVec);

		XMFLOAT3 directionToSpaceshipFloat3;
		XMStoreFloat3(&directionToSpaceshipFloat3, dirToSpaceship);

		_look = directionToSpaceshipFloat3;

		XMVECTOR upVect = XMLoadFloat3(&up);
		XMVECTOR rightVec = XMVector3Cross(upVect, dirToSpaceship);
		XMFLOAT3 rightFloat3;
		XMStoreFloat3(&rightFloat3, rightVec);

		_right = rightFloat3;

		float checkPlayerDistance = Vector3::Distance(_pos, cl->_pos);

		if (_viewRange >= checkPlayerDistance) // 거리안에 들어왔다. 
		{
			XMVECTOR posVec = XMLoadFloat3(&_pos);
			XMVECTOR playerVec = XMLoadFloat3(&cl->_pos);
			XMVECTOR directionToPlayer = XMVector3Normalize(playerVec - posVec);

			XMFLOAT3 directionToPlayerFloat3;
			XMStoreFloat3(&directionToPlayerFloat3, directionToPlayer);

			_look = directionToPlayerFloat3;

			// right 벡터 계산 (look과 up 벡터의 외적)
			XMVECTOR upVec = XMLoadFloat3(&up);
			XMVECTOR rightVec = XMVector3Cross(upVec, directionToPlayer);
			XMFLOAT3 rightFloat3;
			XMStoreFloat3(&rightFloat3, rightVec);

			// right 벡터를 업데이트
			_right = rightFloat3;

			_pos = Vector3::Add(_pos, directionToPlayerFloat3, _speed);

		}
		else
		{
			// 다시 초기화 위치로? 아니면 멈춤? 

		}
	}
}

bool Monster::CollideCheckToPlayer()
{
	for (auto& pl : ingamePlayer)
	{
		if (m_SPBB.Intersects(pl->m_SPBB) == true)
			return true;
	}
	return false;
}
